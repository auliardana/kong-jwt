version: '6'

x-kong-config:
  &kong-env
  KONG_DATABASE: ${KONG_DATABASE:-postgres}
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: kong-database
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD: mykongpassword

volumes:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  postgres-data:
    driver: local
  # mongo-data:
  #   driver: local

networks:
  kong-net:
    external: false
    ipam:
      config:
        - subnet: 172.1.1.0/24

services:
  ################################################
  # Kong components (Kong & PostgreSQL Database) #
  ################################################
  kong-migrations:
    image: kong:3.5
    command: kong migrations bootstrap
    environment:
      <<: *kong-env
    networks:
      - kong-net
    restart: on-failure
    depends_on:
      - kong-database

  kong-migrations-up:
    image: kong:3.5
    command: kong migrations up && kong migrations finish
    environment:
      <<: *kong-env
    networks:
      - kong-net
    restart: on-failure
    depends_on:
      - kong-database

  kong:
    image: kong:3.5
    user: "${KONG_USER:-kong}"
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000, 0.0.0.0:8443 ssl}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      KONG_ADMIN_GUI_LISTEN: "${KONG_ADMIN_GUI_LISTEN:-0.0.0.0:8002}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_TRACING_INSTRUMENTATIONS: "request"
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yml
    networks:
      - kong-net
    ports:
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      - "127.0.0.1:8001:8001/tcp"
      - "127.0.0.1:8444:8444/tcp"
      - "127.0.0.1:8002:8002/tcp"
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
      - ./kong.yml:/etc/kong/kong.yml
    security_opt:
      - no-new-privileges

  kong-database:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-mykongpassword}
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-d",
          "${KONG_PG_DATABASE:-kong}",
          "-U",
          "${KONG_PG_USER:-kong}"
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    stdin_open: true
    tty: true
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data
      
  #############################################
  # Demo services : api, postgres #
  #############################################

  hello-service:
    container_name: hello-service
    build: 
      context: ../..
      dockerfile: ./build/hello-service/Dockerfile
    restart: always
    ports:
        - 7777:7777
    depends_on:
        - hello-db
    networks:
        kong-net:
            ipv4_address: 172.1.1.9

  hello-db:
    image: postgres:latest
    container_name: hello-db
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
        kong-net:
          ipv4_address: 172.1.1.10
    
  # secure-service:
  #   container_name: secure-service
  #   build: 
  #     context: ../..
  #     dockerfile: ./build/secure-service/Dockerfile
  #   restart: always
  #   ports:
  #       - 6666:6666
  #   depends_on:
  #       - secure-mongo
  #   networks:
  #       kong-net:
  #           ipv4_address: 172.1.1.11

  # secure-mongo:
  #   image: mongo:latest
  #   container_name: mongodb
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: example
  #   ports:
  #     - "27017:27017"
  #   volumes:
  #     - mongo-data:/data/db
  #     - ./init-mongo:/docker-entrypoint-initdb.d/
  #   networks:
  #     kong-net:
  #       ipv4_address: 172.1.1.12

  # mongo-express:
  #   image: mongo-express
  #   restart: always
  #   ports:
  #     - 8081:8081
  #   networks:
  #     kong-net:
  #       ipv4_address: 172.1.1.13
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: example
  #     ME_CONFIG_MONGODB_URL: mongodb://root:example@mongodb:27017/

  auth-service:
    container_name: auth-service
    build: 
      context: ../..
      dockerfile: ./build/auth-service/Dockerfile
    restart: always
    ports:
        - 8888:8888
    depends_on:
        - auth-db
    networks:
        kong-net:
            ipv4_address: 172.1.1.14

  auth-db:
    image: postgres:latest
    container_name: auth-db
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
        kong-net:
          ipv4_address: 172.1.1.15